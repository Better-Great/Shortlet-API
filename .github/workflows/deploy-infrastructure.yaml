name: Deploy Current Time API

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: current-time-api-cluster
  GKE_ZONE: us-central1-a
  IMAGE: current-time-api

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Verify gcloud CLI
      run: gcloud info

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker gcr.io --quiet

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0

    - name: Initialize Terraform
      run: |
        cd Terraform
        terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    # - name: Terraform Format
    #   run: |
    #     cd Terraform
    #     terraform fmt -check

    - name: Terraform Plan
      run: |
        cd Terraform
        terraform plan -out=tfplan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    - name: Terraform Apply
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        cd Terraform
        terraform apply -auto-approve tfplan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    - name: Build Docker Image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA current-time-api/

    - name: Push Docker Image to GCR
      run: |
        docker push gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA

    - name: Get GKE Credentials
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

    - name: Deploy to GKE
      run: |
        kubectl set image deployment/current-time-api current-time-api=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA

    - name: Wait for Deployment
      run: |
        kubectl rollout status deployment/current-time-api

    - name: Test API
      run: |
        EXTERNAL_IP=$(kubectl get service current-time-api -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
        response=$(curl -s -o /dev/null -w "%{http_code}" http://$EXTERNAL_IP)
        if [ $response = "200" ]; then
          echo "API is accessible"
        else
          echo "API is not accessible"
          exit 1
        fi






# name: Deploy Current Time API

# on:
#   push:
#     branches: [ main ]
#     paths-ignore:
#       - 'README.md'
#   pull_request:
#     branches: [ main ]
#     paths-ignore:
#       - 'README.md'

# env:
#   PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
#   GKE_CLUSTER: current-time-api-cluster
#   GKE_ZONE: us-central1-a
#   IMAGE: current-time-api

# jobs:
#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v3

#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v2
#       with:
#         terraform_version: 1.0.0

#     - name: Setup GCloud CLI
#       uses: google-github-actions/setup-gcloud@v1
#       with:
#         service_account_key: ${{ secrets.GCP_SA_KEY }}
#         project_id: ${{ secrets.GCP_PROJECT_ID }}
#         export_default_credentials: true

#     - name: Configure Docker for GCR
#       run: |
#         gcloud auth configure-docker gcr.io --quiet

#     - name: Authenticate GCloud CLI
#       run: |
#         echo '${{ secrets.GCP_SA_KEY }}' > gcp-key.json
#         gcloud auth activate-service-account --key-file=gcp-key.json
#         rm gcp-key.json

#     - name: Debug Info
#       run: |
#         echo "Project ID: $PROJECT_ID"
#         echo "GOOGLE_APPLICATION_CREDENTIALS is set: ${{ env.GOOGLE_APPLICATION_CREDENTIALS != '' }}"
#         gcloud config list

#     - name: Initialize Terraform
#       env:
#         GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
#       run: |
#         cd Terraform
#         terraform init


#     - name: Terraform Plan
#       env:
#         GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
#       run: |
#         cd Terraform
#         terraform plan -out=tfplan

#     - name: Terraform Apply
#       if: github.event_name == 'push'
#       env:
#         GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
#       run: |
#         cd Terraform
#         terraform apply -auto-approve tfplan

#     # - name: Terraform Plan
#     #   run: |
#     #     cd Terraform
#     #     terraform plan -out=tfplan

#     # - name: Terraform Apply
#     #   if: github.event_name == 'push'
#     #   run: |
#     #     cd Terraform
#     #     terraform apply -auto-approve tfplan

#     - name: Build Docker Image
#       run: |
#         docker build -t gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA current-time-api/

#     - name: Push Docker Image to GCR
#       run: |
#         docker push gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA

#     - name: Get GKE Credentials
#       run: |
#         gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

#     - name: Deploy to GKE
#       run: |
#         kubectl set image deployment/current-time-api current-time-api=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA

#     - name: Wait for Deployment
#       run: |
#         kubectl rollout status deployment/current-time-api

#     - name: Test API
#       run: |
#         EXTERNAL_IP=$(kubectl get service current-time-api -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
#         response=$(curl -s -o /dev/null -w "%{http_code}" http://$EXTERNAL_IP)
#         if [ $response = "200" ]; then
#           echo "API is accessible"
#         else
#           echo "API is not accessible"
#           exit 1
#         fi



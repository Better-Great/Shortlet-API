name: Deploy Current Time API

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: current-time-api-cluster
  GKE_ZONE: us-central1-a
  IMAGE: current-time-api

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Verify gcloud CLI
      run: gcloud info

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker gcr.io --quiet

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0

    - name: Create Terraform variables file
      run: |
        echo 'google_credentials = <<EOT' > terraform.tfvars
        echo '${{ secrets.GCP_SA_KEY }}' >> terraform.tfvars
        echo 'EOT' >> terraform.tfvars

    - name: Initialize Terraform
      run: |
        cd Terraform
        terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    - name: Remove Terraform State Lock
      run: |
        cd Terraform
        terraform force-unlock -force $(terraform show -json | jq -r '.values.root_module.resources[] | select(.type == "google_storage_bucket_object" and .name == "terraform_state_lock") | .values.id')
      continue-on-error: true
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
      
    - name: Terraform Plan
      run: |
        cd Terraform
        for i in {1..3}; do
          terraform plan -out=tfplan -var-file="../terraform.tfvars" -lock-timeout=5m && break
          echo "Attempt $i failed. Retrying in 30 seconds..."
          sleep 30
        done
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        
    - name: Terraform Apply
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        cd Terraform
        for i in {1..3}; do
          terraform apply -auto-approve tfplan && break
          echo "Attempt $i failed. Retrying in 30 seconds..."
          sleep 30
        done
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
 
    # - name: Grant Artifact Registry Writer Role
    #   run: |
    #     gcloud projects add-iam-policy-binding $PROJECT_ID \
    #       --member="serviceAccount:$SERVICE_ACCOUNT_EMAIL" \
    #       --role="roles/artifactregistry.writer"
        

    # - name: Build Docker Image
    #   run: |
    #     docker build -t gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA current-time-api/

    # - name: Push Docker Image to GCR
    #   run: |
    #     docker push gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA

    - name: Get GKE Credentials
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

    - name: Deploy to GKE
      run: |
        kubectl set image deployment/current-time-api current-time-api=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA

    - name: Wait for Deployment
      run: |
        kubectl rollout status deployment/current-time-api









#     - name: Configure Docker for GCR
#       run: |
#         gcloud auth configure-docker gcr.io --quiet
#         gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io


#     - name: Build Docker Image
#       run: |
#         docker build -t gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA current-time-api/

#     - name: Push Docker Image to GCR
#       run: |
#         docker push gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA

#     - name: Get GKE Credentials
#       run: |
#         gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

#     - name: Deploy to GKE
#       run: |
#         kubectl set image deployment/current-time-api current-time-api=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA

#     - name: Wait for Deployment
#       run: |
#         kubectl rollout status deployment/current-time-api

#     - name: Test API
#       run: |
#         EXTERNAL_IP=$(kubectl get service current-time-api -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
#         response=$(curl -s -o /dev/null -w "%{http_code}" http://$EXTERNAL_IP)
#         if [ $response = "200" ]; then
#           echo "API is accessible"
#         else
#           echo "API is not accessible"
#           exit 1
#         fi

# #jgj
name: Deploy Current Time API

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: current-time-api-cluster
  GKE_ZONE: us-central1-a
  IMAGE: current-time-api
  SERVICE_ACCOUNT_EMAIL: gke-service-account@ultra-task-434221-r5.iam.gserviceaccount.com

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Install GKE Auth Plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin
        echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

    - name: Verify gcloud CLI
      run: gcloud info

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker gcr.io --quiet

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0

    - name: Create Terraform variables file
      run: |
        echo 'google_credentials = <<EOT' > terraform.tfvars
        echo '${{ secrets.GCP_SA_KEY }}' >> terraform.tfvars
        echo 'EOT' >> terraform.tfvars

    - name: Initialize Terraform
      run: |
        cd Terraform
        terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    - name: Remove Terraform State Lock
      run: |
        cd Terraform
        terraform force-unlock -force $(terraform show -json | jq -r '.values.root_module.resources[] | select(.type == "google_storage_bucket_object" and .name == "terraform_state_lock") | .values.id')
      continue-on-error: true
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
      
    - name: Terraform Plan
      run: |
        cd Terraform
        for i in {1..3}; do
          terraform plan -out=tfplan -var-file="../terraform.tfvars" -lock-timeout=5m && break
          echo "Attempt $i failed. Retrying in 30 seconds..."
          sleep 30
        done
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        
    - name: Terraform Apply
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        cd Terraform
        for i in {1..3}; do
          terraform apply -auto-approve tfplan && break
          echo "Attempt $i failed. Retrying in 30 seconds..."
          sleep 30
        done
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    - name: Grant Artifact Registry Writer Role
      run: |
        echo '${{ secrets.GCP_SA_KEY }}' > /tmp/sa_key.json
        gcloud auth activate-service-account --key-file=/tmp/sa_key.json
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:$SERVICE_ACCOUNT_EMAIL" \
          --role="roles/artifactregistry.writer"
        rm /tmp/sa_key.json


    - name: Build Docker Image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA current-time-api/

    - name: Push Docker Image to GCR
      run: |
        docker push gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA

    - name: Output Image Identifier
      run: |
        echo "Image successfully built and pushed to GCR"
        echo "Image identifier: gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
        echo "IMAGE_ID=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" >> $GITHUB_ENV

    - name: Create Deployment Artifact
      run: |
        echo "To deploy this image, use the following command:" > deployment_instructions.txt
        echo "kubectl set image deployment/current-time-api current-time-api=$IMAGE_ID" >> deployment_instructions.txt

    - name: Check and Create Kubernetes Resources
      run: |
        # Check if namespace exists, create if it doesn't
        if ! kubectl get namespace current-time-api &> /dev/null; then
          kubectl create namespace current-time-api
        fi

        # Check if deployment exists, create if it doesn't
        if ! kubectl get deployment current-time-api -n current-time-api &> /dev/null; then
          kubectl create deployment current-time-api --image=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA -n current-time-api
        fi

        # Check if service exists, create if it doesn't
        if ! kubectl get service current-time-api -n current-time-api &> /dev/null; then
          kubectl expose deployment current-time-api --type=LoadBalancer --port=80 --target-port=5000 -n current-time-api
        fi

    - name: Deploy to GKE
      run: |
        kubectl set image deployment/current-time-api current-time-api=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA -n current-time-api

    - name: Wait for Deployment
      run: |
        kubectl rollout status deployment/current-time-api -n current-time-api

    - name: Test API
      run: |
        EXTERNAL_IP=$(kubectl get service current-time-api -n current-time-api -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
        response=$(curl -s -o /dev/null -w "%{http_code}" http://$EXTERNAL_IP)
        if [ $response = "200" ]; then
          echo "API is accessible"
        else
          echo "API is not accessible"
          exit 1
        fi
